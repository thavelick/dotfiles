#!/usr/bin/env bash
# Inspired by https://codeberg.org/EvanHahn/dotfiles/src/branch/main/home/bin/bin/trash
# Simplified to use mv instead of osascript/gio
set -e
set -u
set -o pipefail

if [[ "${1:-}" == "-h" ]] || [[ "${1:-}" == "--help" ]]; then
    cat <<EOF
Usage: trashit <file|directory> [...]

Move files or directories to trash instead of permanently deleting them.

This is a safer alternative to 'rm' that moves items to a trash directory:
  - Projects (~/Projects/*): .Trash in project root (auto-added to .gitignore)
  - macOS (elsewhere): ~/.Trash
  - Linux (elsewhere): ~/.cache/trash

Multiple files can be trashed in a single command.

Examples:
  trashit file.txt              - Move single file to trash
  trashit file1.txt file2.txt   - Move multiple files to trash
  trashit my_directory          - Move directory to trash
  trashit *.tmp                 - Move all .tmp files to trash
EOF
    exit 0
fi

if [[ $# -lt 1 ]]; then
    echo "Usage: trashit <file|directory> [...]" >&2
    exit 1
fi

# Check if we're in a ~/Projects directory and use project-local trash
current_dir="$(pwd)"
if [[ "$current_dir" == "$HOME/Projects/"* ]]; then
  # Find the project root (first directory under ~/Projects)
  project_root="$HOME/Projects/$(echo "$current_dir" | sed "s|^$HOME/Projects/||" | cut -d/ -f1)"
  trash_dir="$project_root/.Trash"

  # Create .Trash directory if it doesn't exist
  mkdir -p "$trash_dir"

  # Add .Trash to .gitignore if project has git and .Trash isn't already ignored
  if [[ -d "$project_root/.git" ]]; then
    gitignore="$project_root/.gitignore"
    if [[ ! -f "$gitignore" ]] || ! grep -q "^\.Trash$" "$gitignore" 2>/dev/null; then
      echo ".Trash" >> "$gitignore"
    fi
  fi
else
  # Use system trash for non-project files
  if [[ "$(uname)" == 'Darwin' ]]; then
    trash_dir="$HOME/.Trash"
  else
    trash_dir="$HOME/.cache/trash"
    mkdir -p "$trash_dir"
  fi
fi

for arg in "$@"; do
  mv "$arg" "$trash_dir/"
done
