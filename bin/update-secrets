#!/usr/bin/env python3
"""Populate config files with secrets from KeePassXC.

This script reads sensitive data from your KeePassXC database and
populates config file templates with actual values, based on mappings
defined in secrets.json files.

Usage: update-secrets [config_name]
  update-secrets          # Update all configs
  update-secrets rclone   # Update only rclone config
"""
# pylint: disable=invalid-name

import json
import re
import subprocess
import sys
from pathlib import Path


class Colors:
    """ANSI color codes for terminal output."""

    RED = "\033[31m"
    GREEN = "\033[32m"
    YELLOW = "\033[33m"
    RESET = "\033[0m"


def error(msg):
    """Print an error message in red."""
    print(f"{Colors.RED}Error: {msg}{Colors.RESET}", file=sys.stderr)


def success(msg):
    """Print a success message in green."""
    print(f"{Colors.GREEN}{msg}{Colors.RESET}")


def info(msg):
    """Print an info message in yellow."""
    print(f"{Colors.YELLOW}{msg}{Colors.RESET}")


def get_kdbx_path():
    """Get KeePassXC database path."""
    kdbx_path = Path.home() / "Sync" / "Tristan.kdbx"
    if not kdbx_path.exists():
        error(f"KeePassXC database not found at {kdbx_path}")
        sys.exit(1)
    return kdbx_path


def get_dotfiles_dir():
    """Get dotfiles directory (parent of this script)."""
    script_path = Path(__file__).resolve()
    return script_path.parent.parent


def get_kdbx_attributes(kdbx_path, entry_name, attribute_names, password):
    """Query specific attributes from a KeePassXC entry."""
    try:
        results = {}
        for attr_name in attribute_names:
            cmd = [
                "keepassxc-cli",
                "show",
                "-s",
                "-a",
                attr_name,
                str(kdbx_path),
                entry_name,
            ]

            result = subprocess.run(
                cmd, input=password + "\n", capture_output=True, text=True, check=False
            )

            if result.returncode != 0:
                stderr = result.stderr.strip()
                if "Invalid credentials" in stderr or "HMAC mismatch" in stderr:
                    error("Invalid KeePassXC password")
                    return None
                if "not found" in stderr:
                    error(f"Entry '{entry_name}' not found in KeePassXC")
                    return None
                error(f"Failed to retrieve attribute '{attr_name}': {stderr}")
                return None

            value = result.stdout.strip()
            if value is not None:
                results[attr_name] = value

        # Check for missing attributes
        missing = [attr for attr in attribute_names if attr not in results]
        if missing:
            error(f"Missing attributes in KeePassXC entry '{entry_name}':")
            for attr in missing:
                print(f"  - {attr}", file=sys.stderr)
            return None

        return results
    except FileNotFoundError:
        error("keepassxc-cli not found. Install KeePassXC CLI tools.")
        sys.exit(1)


def update_config(config_name, dotfiles_dir, kdbx_path):
    """Update a single config based on its secrets.json mapping."""
    config_dir = dotfiles_dir / config_name

    # Load secrets mapping
    secrets_json = config_dir / "secrets.json"
    if not secrets_json.exists():
        error(f"Mapping file not found: {secrets_json}")
        return False

    try:
        with open(secrets_json, encoding="utf-8") as f:
            config = json.load(f)
    except json.JSONDecodeError as e:
        error(f"Invalid JSON in {secrets_json}: {e}")
        return False

    # Get config parameters
    kdbx_entry = config.get("kdbx_entry")
    template_name = config.get("template")
    output_path = Path(config.get("output")).expanduser()
    fields = config.get("fields", {})

    if not all([kdbx_entry, template_name, fields]):
        error(f"Invalid config in {secrets_json}: missing required keys")
        return False

    template_file = config_dir / template_name
    if not template_file.exists():
        error(f"Template not found: {template_file}")
        return False

    info(f"Updating {config_name} config...")

    # Get password from user
    password = input(f"Enter password to unlock {kdbx_path.name}: ")

    # Fetch all attributes from KeePassXC entry
    attribute_names = list(fields.keys())
    attribute_data = get_kdbx_attributes(kdbx_path, kdbx_entry, attribute_names, password)
    if attribute_data is None:
        return False

    # Map attribute names to template variables
    secrets = {}
    for attribute_name, var_name in fields.items():
        if attribute_name in attribute_data:
            secrets[var_name] = attribute_data[attribute_name]

    # Check for missing attributes
    missing = [attr for attr in fields.keys() if attr not in attribute_data]
    if missing:
        error(f"Missing attributes in KeePassXC entry '{kdbx_entry}':")
        for attr in missing:
            print(f"  - {attr}", file=sys.stderr)
        return False

    # Read template
    try:
        with open(template_file, encoding="utf-8") as f:
            content = f.read()
    except IOError as e:
        error(f"Failed to read template: {e}")
        return False

    # Replace placeholders
    for var_name, value in secrets.items():
        placeholder = f"{{{{{var_name}}}}}"
        content = content.replace(placeholder, value)

    # Check for unreplaced placeholders
    unreplaced = re.findall(r"\{\{[A-Z_]+\}\}", content)
    if unreplaced:
        error(f"Unreplaced placeholders: {', '.join(set(unreplaced))}")
        return False

    # Write output file
    try:
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, "w", encoding="utf-8") as f:
            f.write(content)
        output_path.chmod(0o600)
    except IOError as e:
        error(f"Failed to write config: {e}")
        return False

    success(f"✓ {config_name} config updated: {output_path}")
    return True


def main():
    """Main entry point."""
    dotfiles_dir = get_dotfiles_dir()
    kdbx_path = get_kdbx_path()

    # Determine which configs to update
    if len(sys.argv) > 1:
        configs = sys.argv[1:]
    else:
        # Update all configs with secrets.json
        configs = [
            d.name
            for d in dotfiles_dir.iterdir()
            if d.is_dir() and (d / "secrets.json").exists()
        ]

    if not configs:
        error("No configs found to update")
        sys.exit(1)

    # Update each config
    failed = []
    for config in configs:
        if not update_config(config, dotfiles_dir, kdbx_path):
            failed.append(config)

    if failed:
        error(f"Failed to update: {', '.join(failed)}")
        sys.exit(1)

    success("✓ All configs updated")


if __name__ == "__main__":
    main()
