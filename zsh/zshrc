PATH=$PATH:$HOME/.local/bin

HISTSIZE=100000
SAVEHIST=100000
HISTFILE=~/.cache/zsh/history

export DOTFILES_HOME=$HOME/Projects/dotfiles
export EDITOR=nvim
export BROWSER=firefox
export GPG_TTY=$TTY
export PYTHONPATH=.
export MOZ_ENABLE_WAYLAND="1"
export XKB_DEFAULT_LAYOUT="us(colemak)"
export XKB_DEFAULT_OPTIONS=ctrl:nocaps

source "$DOTFILES_HOME/zsh/keys.zsh"
source $HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source $HOME/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

ZSH_HIGHLIGHT_STYLES[comment]='fg=blue'

[[ -n $(diff --version | grep GNU) ]] && alias diff='diff --color'
[[ ! -f /opt/homebrew/bin/gdate ]] && alias gdate='date'
alias vat="vim -R -c 'set nomodifiable' -c 'nmap q :q!<CR>' -c 'set norelativenumber'"
alias bat='echo "just use vat"'
alias batp='echo "just use vat"'
alias count_tokens='python3 -c '\''import tiktoken, sys; encoding = tiktoken.encoding_for_model("gpt-3.5-turbo"); token_count = len(encoding.encode(sys.stdin.read())); print(token_count)'\'''

which nvim > /dev/null && alias vim='nvim'
alias ls='ls --color=auto'
alias ask="$HOME/Projects/ai-asker/ask.py"
alias ask4="$HOME/Projects/ai-asker/ask.py --model gpt-4"
alias autocommit="$HOME/Projects/dotfiles/git/auto-commit.zsh"
alias clipstocks="SYMBOLS=VFIAX,VTIVX,VTSAX $HOME/Projects/stock-tsv/venv/bin/python3 $HOME/Projects/stock-tsv/stock_tsv.py | wl-copy"
alias ghreadme="$DOTFILES_HOME/ghreadme.sh"
alias mpv="mpv --no-terminal"
alias mpvi="mpv --no-terminal --loop-file"
alias ed="busybox ed"
alias nc="busybox nc"
alias nslookup="busybox nslookup"
alias mailsync="mbsync primary && notmuch new"
alias llm4="/home/tristan/src/llm/venv/bin/llm --model 4o"
qr-paste () {
  [[ -f /usr/sbin/wl-paste ]] && /usr/sbin/wl-paste | \
    qrencode -o - -t PNG | imv -
}

def() {
  sdcv -n --utf8-output "$@" 2>&1 | sed 's/-->/<p>-->/g' | elinks -dump | less -EXFRfM
}

uniclip() {
    cat $DOTFILES_HOME/zsh/latex_symbols.txt| fzf --query $1 | tr -s ' ' | cut -d ' ' -f2 | tr -d "\n" | wl-copy
}

foreground() {
    fg
}

zle -N foreground
# use ctrl-z to toggle in and out of bg
if [[ $- == *i* ]]; then
  stty susp undef
  bindkey "^Z" foreground
fi

# If windows defaults us to it's home directory, swtich to the unix one
[ $(pwd) = "/mnt/c/Users/trist" ] && cd $HOME || true

# store secrets outside of source control
[ -f $HOME/secrets.zsh ] && source $HOME/secrets.zsh || true

# If this is a work computer, include work specific stuff
[ -f $HOME/work.zsh ] && source $HOME/work.zsh && source $DOTFILES_HOME/work/github.zsh || true

source $DOTFILES_HOME/gemini.zsh

setopt interactive_comments
# $HOME/Projects/nag-runner/nag_runner.py


# prompt
autoload -Uz vcs_info
zstyle ':vcs_info:*' enable git
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:*' unstagedstr 'üöß'
zstyle ':vcs_info:*' stagedstr 'üíæ'

preexec() {
  exec_start_time=$(gdate +%s%3N) # Record start time of the command in milliseconds
}

set_prompt_time() {
  # Set prompt_time to show how long the last command took to run: üê¢ 1m2s
  # It will only show if the command took longer than 5 seconds.
  # If the command took longer than 60 seconds, it will show minutes and
  # seconds.

  prompt_time=''
  if [ "$exec_start_time" ]; then
    exec_end_time=$(gdate +%s%3N) # Record end time of the command in milliseconds
    exec_duration=$((exec_end_time - exec_start_time)) # Calculate command duration in milliseconds
    exec_duration_seconds=$((exec_duration / 1000)) # Convert duration to seconds

    if (( exec_duration_seconds >= 5 )); then
      clock_icon="üê¢"
      if (( exec_duration_seconds >= 60 )); then
        exec_duration_minutes=$((exec_duration_seconds / 60))
        exec_duration_seconds=$((exec_duration_seconds % 60))
        prompt_time="${clock_icon} ${exec_duration_minutes}m${exec_duration_seconds}s "
      else
        prompt_time="${clock_icon} ${exec_duration_seconds}s "
      fi
    fi
  fi
  exec_start_time=''
}

precmd() {
  set_prompt_time

  current_directory=$(pwd)
  if [[ $current_directory != $HOME/Projects/* ]]; then
    # skip doing stuff with git prompts if we're outside of ~/Projects
    # to avoid running rogue payloads in untrusted folders when we automatically
    # run git commands

    # make sure any previous prompts from within ~/Projects are cleared out
    vcs_info_msg_0_=''
    return
  fi

  unpushed_commits=''
  untracked_files=''
  if [ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" = "true" ]; then
    # we're in a git project, show git info in the prompt
    unpushed_count=$(git rev-list --count @{u}.. 2>/dev/null || echo -1)
    if [[ $unpushed_count -eq -1 ]]; then
      # if we can't get the count, assume we're not tracking a remote
      unpushed_commits='üì§'
    elif [[ $unpushed_count -gt 0 ]]; then
      unpushed_commits='üî•'
    fi
    if [[ -n $(git ls-files --others --exclude-standard) ]]; then
      untracked_files='üå±'
    fi
  fi
  zstyle ':vcs_info:git:*' formats "(%b%u%c${unpushed_commits}${untracked_files})%m "
  vcs_info
}

distro_icon() {
  if [ ! -f /etc/os-release ]; then
    echo ""
  elif grep -q 'ID=debian' /etc/os-release; then
    echo "Í©ú"
  elif grep -q 'ID=arch' /etc/os-release; then
    echo "‚Æù"
  else
    echo ""
  fi
}
setopt prompt_subst
PROMPT='${prompt_time}%~ $(distro_icon) ${vcs_info_msg_0_}% ‚ûú '

if [[ $(tty) == /dev/tty1 ]]; then
  exec river
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
